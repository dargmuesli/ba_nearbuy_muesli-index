name: CI

on: [create, pull_request, push]

env:
  IMAGE_ID: ${{ github.repository }}

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0

      - name: Docker Buildx setup
        id: buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # renovate: tag=v1.6.0

      - name: Registry login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=nearbuy_muesli-index
          echo VERSION=$VERSION

          docker buildx build \
            --cache-from=$IMAGE_ID:cache \
            --load \
            -t stage_build \
            --target build \
            .
          docker container create --name extract stage_build
          docker container cp extract:/srv/app/ ./dist/
          docker container rm -f extract

          # Push the Docker image to the registry on git pushes that either pushed a tag or one of the following branches: [master, develop]
          if [[
            (
              "${{ github.event_name }}" == "create"
              &&
              ${{ startsWith(github.ref, 'refs/tags/') }} == "true"
            )
            ||
            (
              "${{ github.event_name }}" == "push"
              &&
              ${{ startsWith(github.ref, 'refs/heads/') }} == "true"
              &&
              (
                $VERSION == "latest"
                ||
                $VERSION == "develop"
              )
            )
          ]]
          then
            docker buildx build \
              --cache-from=$IMAGE_ID:cache \
              --cache-to=$IMAGE_ID:cache \
              --push \
              -t $IMAGE_ID:$VERSION \
              .
          else
            docker buildx build \
              --cache-from=$IMAGE_ID:cache \
              -t $IMAGE_ID:$VERSION \
              .
          fi

      - name: Zip
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') }}
        uses: montudor/action-zip@0852c26906e00f8a315c704958823928d8018b28 # renovate: tag=v1.0.0
        with:
          args: zip -qq -r ./${{ github.repository }}.zip ./dist/

      - uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # renovate: tag=v2
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') }}
        with:
          name: ${{ github.repository }}.zip
          path: ./${{ github.repository }}.zip
          retention-days: 1
  semantic-release:
    if: github.event_name != 'pull_request'
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@767cc0b0cd610ffb1ffee1b36a9b39120adc5f80 # renovate: tag=v2.6.0
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release-assets:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release Assets
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:
      - uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # renovate: tag=v2
        with:
          name: ${{ github.repository }}.zip

      - name: GitHub Release Asset
        uses: softprops/action-gh-release@6034af24fba4e5a8e975aaa6056554efe4c794d0 # renovate: tag=v1
        with:
          files: ${{ github.repository }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
